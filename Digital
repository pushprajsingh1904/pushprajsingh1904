#include <WiFi.h>
#include <WebServer.h>
#include <Servo.h>

Servo bootServo;

// === Motor Driver Pins ===
// L298N 1
#define L1_IN1 2
#define L1_IN2 4
#define R1_IN1 16
#define R1_IN2 17

// L298N 2
#define L2_IN1 5
#define L2_IN2 18
#define R2_IN1 19
#define R2_IN2 21

// L298N 3
#define L3_IN1 22
#define L3_IN2 23
#define R3_IN1 25
#define R3_IN2 26

// L298N 4
#define L4_IN1 27
#define L4_IN2 14
#define R4_IN1 32
#define R4_IN2 33

// Servo + Ultrasonic Pins
#define SERVO_PIN 13
#define TRIG_PIN 12
#define ECHO_PIN 15

// WiFi Access Point Info
const char* ssid = "Rover_AP";
const char* password = "12345678";

// Web server
WebServer server(80);

long duration;
int distance;

void stopAll() {
  digitalWrite(L1_IN1, LOW); digitalWrite(L1_IN2, LOW);
  digitalWrite(R1_IN1, LOW); digitalWrite(R1_IN2, LOW);
  digitalWrite(L2_IN1, LOW); digitalWrite(L2_IN2, LOW);
  digitalWrite(R2_IN1, LOW); digitalWrite(R2_IN2, LOW);
  digitalWrite(L3_IN1, LOW); digitalWrite(L3_IN2, LOW);
  digitalWrite(R3_IN1, LOW); digitalWrite(R3_IN2, LOW);
  digitalWrite(L4_IN1, LOW); digitalWrite(L4_IN2, LOW);
  digitalWrite(R4_IN1, LOW); digitalWrite(R4_IN2, LOW);
}

void forward() {
  digitalWrite(L1_IN1, HIGH); digitalWrite(L1_IN2, LOW);
  digitalWrite(R1_IN1, HIGH); digitalWrite(R1_IN2, LOW);
  digitalWrite(L2_IN1, HIGH); digitalWrite(L2_IN2, LOW);
  digitalWrite(R2_IN1, HIGH); digitalWrite(R2_IN2, LOW);
  digitalWrite(L3_IN1, HIGH); digitalWrite(L3_IN2, LOW);
  digitalWrite(R3_IN1, HIGH); digitalWrite(R3_IN2, LOW);
  digitalWrite(L4_IN1, HIGH); digitalWrite(L4_IN2, LOW);
  digitalWrite(R4_IN1, HIGH); digitalWrite(R4_IN2, LOW);
}

void backward() {
  digitalWrite(L1_IN1, LOW); digitalWrite(L1_IN2, HIGH);
  digitalWrite(R1_IN1, LOW); digitalWrite(R1_IN2, HIGH);
  digitalWrite(L2_IN1, LOW); digitalWrite(L2_IN2, HIGH);
  digitalWrite(R2_IN1, LOW); digitalWrite(R2_IN2, HIGH);
  digitalWrite(L3_IN1, LOW); digitalWrite(L3_IN2, HIGH);
  digitalWrite(R3_IN1, LOW); digitalWrite(R3_IN2, HIGH);
  digitalWrite(L4_IN1, LOW); digitalWrite(L4_IN2, HIGH);
  digitalWrite(R4_IN1, LOW); digitalWrite(R4_IN2, HIGH);
}

void left() {
  digitalWrite(L1_IN1, LOW); digitalWrite(L1_IN2, HIGH);
  digitalWrite(R1_IN1, HIGH); digitalWrite(R1_IN2, LOW);
  digitalWrite(L2_IN1, LOW); digitalWrite(L2_IN2, HIGH);
  digitalWrite(R2_IN1, HIGH); digitalWrite(R2_IN2, LOW);
  digitalWrite(L3_IN1, LOW); digitalWrite(L3_IN2, HIGH);
  digitalWrite(R3_IN1, HIGH); digitalWrite(R3_IN2, LOW);
  digitalWrite(L4_IN1, LOW); digitalWrite(L4_IN2, HIGH);
  digitalWrite(R4_IN1, HIGH); digitalWrite(R4_IN2, LOW);
}

void right() {
  digitalWrite(L1_IN1, HIGH); digitalWrite(L1_IN2, LOW);
  digitalWrite(R1_IN1, LOW); digitalWrite(R1_IN2, HIGH);
  digitalWrite(L2_IN1, HIGH); digitalWrite(L2_IN2, LOW);
  digitalWrite(R2_IN1, LOW); digitalWrite(R2_IN2, HIGH);
  digitalWrite(L3_IN1, HIGH); digitalWrite(L3_IN2, LOW);
  digitalWrite(R3_IN1, LOW); digitalWrite(R3_IN2, HIGH);
  digitalWrite(L4_IN1, HIGH); digitalWrite(L4_IN2, LOW);
  digitalWrite(R4_IN1, LOW); digitalWrite(R4_IN2, HIGH);
}

// === Ultrasonic distance ===
int getDistance() {
  digitalWrite(TRIG_PIN, LOW);
  delayMicroseconds(2);
  digitalWrite(TRIG_PIN, HIGH);
  delayMicroseconds(10);
  digitalWrite(TRIG_PIN, LOW);
  duration = pulseIn(ECHO_PIN, HIGH, 20000);
  int dist = duration * 0.034 / 2;
  return dist;
}

// === Web Page ===
String htmlPage() {
  String page = "<html><body><h2>ESP32 8x8 Rover</h2>";
  page += "<button onclick=\"location.href='/forward'\">Forward</button>";
  page += "<button onclick=\"location.href='/backward'\">Backward</button>";
  page += "<button onclick=\"location.href='/left'\">Left</button>";
  page += "<button onclick=\"location.href='/right'\">Right</button>";
  page += "<button onclick=\"location.href='/stop'\">Stop</button><br><br>";
  page += "<button onclick=\"location.href='/boot'\">Open Boot</button>";
  page += "</body></html>";
  return page;
}

void handleRoot() { server.send(200, "text/html", htmlPage()); }
void handleForward() { forward(); server.send(200, "text/html", htmlPage()); }
void handleBackward() { backward(); server.send(200, "text/html", htmlPage()); }
void handleLeft() { left(); server.send(200, "text/html", htmlPage()); }
void handleRight() { right(); server.send(200, "text/html", htmlPage()); }
void handleStop() { stopAll(); server.send(200, "text/html", htmlPage()); }

void handleBoot() {
  bootServo.write(90);
  delay(1000);
  bootServo.write(0);
  server.send(200, "text/html", htmlPage());
}

// === Setup ===
void setup() {
  Serial.begin(115200);
  
  pinMode(TRIG_PIN, OUTPUT);
  pinMode(ECHO_PIN, INPUT);
  
  int pins[] = {L1_IN1, L1_IN2, R1_IN1, R1_IN2,
                L2_IN1, L2_IN2, R2_IN1, R2_IN2,
                L3_IN1, L3_IN2, R3_IN1, R3_IN2,
                L4_IN1, L4_IN2, R4_IN1, R4_IN2};
  for (int i = 0; i < 16; i++) pinMode(pins[i], OUTPUT);

  bootServo.attach(SERVO_PIN);
  bootServo.write(0);
  
  WiFi.softAP(ssid, password);
  Serial.print("AP IP address: ");
  Serial.println(WiFi.softAPIP());
  
  server.on("/", handleRoot);
  server.on("/forward", handleForward);
  server.on("/backward", handleBackward);
  server.on("/left", handleLeft);
  server.on("/right", handleRight);
  server.on("/stop", handleStop);
  server.on("/boot", handleBoot);
  server.begin();
}

void loop() {
  server.handleClient();

  int dist = getDistance();
  if (dist > 0 && dist < 25) {
    stopAll();
    delay(300);
    left();
    delay(400);
    stopAll();
  }
}
