#include <WiFi.h>
#include <WebServer.h>
#include <ESP32Servo.h>

// === Servo and Ultrasonic ===
Servo bootServo;
#define SERVO_PIN 13
#define TRIG_PIN 12
#define ECHO_PIN 15

long duration;
int distance;

// === Motor Pins ===
// L298N 1
#define L1_IN1 2
#define L1_IN2 4
#define R1_IN1 16
#define R1_IN2 17
// L298N 2
#define L2_IN1 5
#define L2_IN2 18
#define R2_IN1 19
#define R2_IN2 21
// L298N 3
#define L3_IN1 22
#define L3_IN2 23
#define R3_IN1 25
#define R3_IN2 26
// L298N 4
#define L4_IN1 27
#define L4_IN2 14
#define R4_IN1 32
#define R4_IN2 33

// === WiFi AP ===
const char* ssid = "Rover_AP";
const char* password = "12345678";

WebServer server(80);

// === Flags ===
bool bootOpen = false;
bool autoMode = false;
String currentAction = ""; // forward, backward, left, right

// === Motor functions ===
void stopAll() {
  int pins[] = {L1_IN1,L1_IN2,R1_IN1,R1_IN2,L2_IN1,L2_IN2,R2_IN1,R2_IN2,
                L3_IN1,L3_IN2,R3_IN1,R3_IN2,L4_IN1,L4_IN2,R4_IN1,R4_IN2};
  for(int i=0;i<16;i++) digitalWrite(pins[i], LOW);
}

void forward() {
  digitalWrite(L1_IN1,HIGH); digitalWrite(L1_IN2,LOW);
  digitalWrite(R1_IN1,HIGH); digitalWrite(R1_IN2,LOW);
  digitalWrite(L2_IN1,HIGH); digitalWrite(L2_IN2,LOW);
  digitalWrite(R2_IN1,HIGH); digitalWrite(R2_IN2,LOW);
  digitalWrite(L3_IN1,HIGH); digitalWrite(L3_IN2,LOW);
  digitalWrite(R3_IN1,HIGH); digitalWrite(R3_IN2,LOW);
  digitalWrite(L4_IN1,HIGH); digitalWrite(L4_IN2,LOW);
  digitalWrite(R4_IN1,HIGH); digitalWrite(R4_IN2,LOW);
}

void backward() {
  digitalWrite(L1_IN1,LOW); digitalWrite(L1_IN2,HIGH);
  digitalWrite(R1_IN1,LOW); digitalWrite(R1_IN2,HIGH);
  digitalWrite(L2_IN1,LOW); digitalWrite(L2_IN2,HIGH);
  digitalWrite(R2_IN1,LOW); digitalWrite(R2_IN2,HIGH);
  digitalWrite(L3_IN1,LOW); digitalWrite(L3_IN2,HIGH);
  digitalWrite(R3_IN1,LOW); digitalWrite(R3_IN2,HIGH);
  digitalWrite(L4_IN1,LOW); digitalWrite(L4_IN2,HIGH);
  digitalWrite(R4_IN1,LOW); digitalWrite(R4_IN2,HIGH);
}

void left() {
  digitalWrite(L1_IN1,LOW); digitalWrite(L1_IN2,HIGH);
  digitalWrite(R1_IN1,HIGH); digitalWrite(R1_IN2,LOW);
  digitalWrite(L2_IN1,LOW); digitalWrite(L2_IN2,HIGH);
  digitalWrite(R2_IN1,HIGH); digitalWrite(R2_IN2,LOW);
  digitalWrite(L3_IN1,LOW); digitalWrite(L3_IN2,HIGH);
  digitalWrite(R3_IN1,HIGH); digitalWrite(R3_IN2,LOW);
  digitalWrite(L4_IN1,LOW); digitalWrite(L4_IN2,HIGH);
  digitalWrite(R4_IN1,HIGH); digitalWrite(R4_IN2,LOW);
}

void right() {
  digitalWrite(L1_IN1,HIGH); digitalWrite(L1_IN2,LOW);
  digitalWrite(R1_IN1,LOW); digitalWrite(R1_IN2,HIGH);
  digitalWrite(L2_IN1,HIGH); digitalWrite(L2_IN2,LOW);
  digitalWrite(R2_IN1,LOW); digitalWrite(R2_IN2,HIGH);
  digitalWrite(L3_IN1,HIGH); digitalWrite(L3_IN2,LOW);
  digitalWrite(R3_IN1,LOW); digitalWrite(R3_IN2,HIGH);
  digitalWrite(L4_IN1,HIGH); digitalWrite(L4_IN2,LOW);
  digitalWrite(R4_IN1,LOW); digitalWrite(R4_IN2,HIGH);
}

// === Ultrasonic ===
int getDistance() {
  digitalWrite(TRIG_PIN, LOW); delayMicroseconds(2);
  digitalWrite(TRIG_PIN, HIGH); delayMicroseconds(10);
  digitalWrite(TRIG_PIN, LOW);
  duration = pulseIn(ECHO_PIN, HIGH, 20000);
  int dist = duration * 0.034 / 2;
  return dist;
}

// === Web Page ===
String htmlPage() {
  String page = "<!DOCTYPE html><html><head><meta name='viewport' content='width=device-width, initial-scale=1'>";
  page += "<style>button{width:150px;height:80px;font-size:24px;margin:10px;} </style></head><body>";
  page += "<h2>ESP32 8x8 Rover</h2>";

  // Manual buttons
  page += "<button onmousedown=\"sendCmd('forward')\" onmouseup=\"sendCmd('stop')\">Forward</button><br>";
  page += "<button onmousedown=\"sendCmd('left')\" onmouseup=\"sendCmd('stop')\">Left</button>";
  page += "<button onmousedown=\"sendCmd('right')\" onmouseup=\"sendCmd('stop')\">Right</button><br>";
  page += "<button onmousedown=\"sendCmd('backward')\" onmouseup=\"sendCmd('stop')\">Backward</button><br>";

  // Boot button
  page += "<button onclick=\"sendCmd('boot')\">Boot</button><br>";

  // Auto mode button
  page += "<button onclick=\"sendCmd('auto')\">Toggle Auto Mode</button>";

  page += "<script>";
  page += "function sendCmd(cmd){var xhttp=new XMLHttpRequest(); xhttp.open('GET','/'+cmd,true); xhttp.send();}";
  page += "</script></body></html>";
  return page;
}

// === Web server handlers ===
void handleRoot() { server.send(200,"text/html", htmlPage()); }

void handleCmd() {
  String cmd = server.uri().substring(1); // remove "/"
  if(cmd == "forward") currentAction = "forward";
  else if(cmd == "backward") currentAction = "backward";
  else if(cmd == "left") currentAction = "left";
  else if(cmd == "right") currentAction = "right";
  else if(cmd == "stop") currentAction = "";
  else if(cmd == "boot") {
    if(bootOpen) bootServo.write(0);
    else bootServo.write(90);
    bootOpen = !bootOpen;
  }
  else if(cmd == "auto") autoMode = !autoMode;

  server.send(200,"text/plain","OK");
}

// === Setup ===
void setup() {
  Serial.begin(115200);

  bootServo.attach(SERVO_PIN);
  bootServo.write(0);

  pinMode(TRIG_PIN, OUTPUT);
  pinMode(ECHO_PIN, INPUT);

  int pins[] = {L1_IN1,L1_IN2,R1_IN1,R1_IN2,L2_IN1,L2_IN2,R2_IN1,R2_IN2,
                L3_IN1,L3_IN2,R3_IN1,R3_IN2,L4_IN1,L4_IN2,R4_IN1,R4_IN2};
  for(int i=0;i<16;i++) pinMode(pins[i],OUTPUT);

  WiFi.softAP(ssid,password);
  Serial.print("AP IP address: "); Serial.println(WiFi.softAPIP());

  server.on("/", handleRoot);
  server.on("/forward", handleCmd);
  server.on("/backward", handleCmd);
  server.on("/left", handleCmd);
  server.on("/right", handleCmd);
  server.on("/stop", handleCmd);
  server.on("/boot", handleCmd);
  server.on("/auto", handleCmd);
  server.begin();
}

// === Main loop ===
void loop() {
  server.handleClient();

  // Auto mode
  if(autoMode) {
    forward();
    int dist = getDistance();
    if(dist>0 && dist<25){
      stopAll();
      delay(200);
      left();
      delay(400);
      stopAll();
    }
  }
  else {
    // Manual mode
    if(currentAction=="forward") forward();
    else if(currentAction=="backward") backward();
    else if(currentAction=="left") left();
    else if(currentAction=="right") right();
    else stopAll();
  }
}
